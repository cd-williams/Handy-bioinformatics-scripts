# This snakefile is a pipeline for trimming and filtering paired-end reads from FASTQ and mapping them to a reference genome
# The end result should be a folder containing an indexed BAM file for each sample
# Cian Williams cdw45@cam.ac.uk

# The "target" rule (our final destination; what we would like to have at the end of the pipeline)
rule all:
    input:
        stats = expand("BAM_files/stats/{sample}.stats", sample=config["prefix"]), # diagnostic stats for our alignment
        flagstats = expand("BAM_files/stats/{sample}.flagstats", sample=config["prefix"]),
        index = expand("BAM_files/{sample}.rmd.bam.bai", sample=config["prefix"]) # index for the sorted BAM file with PCR duplicates removed


# Setting the conda environment
default_env = os.path.expanduser("~/Handy-bioinformatics-scripts/Filter_map_reads/envs/filter_map_reads_default.yml") # setting the default conda environment for the rules
config["default_env"] = default_env # put it into the config so we can grab it within other rules

# Creating a function to pull the filepath for a rule
def get_rule_filepath(rule):
    return os.path.expanduser("~/Handy-bioinformatics-scripts/Filter_map_reads/rules/" + rule + ".smk")


# Rule that uses fastp to trim and filter reads
include: get_rule_filepath("trim_filter_fastqs")

# Rule that uses bwa to map reads to reference genome. Modularity of this pipeline means I can add support for other aligners in the future
include: get_rule_filepath("bwa_map")

# Rule to sort the resulting BAM file
include: get_rule_filepath("samtools_sort")

# Rule to index the result of this
include: get_rule_filepath("samtools_index")

# Rule to remove PCR duplicates using Picard
include: get_rule_filepath("remove_PCR_dups")

# Reusing the rule for BAM indexing to index the result of this. Unfortunately there isn't a more elegant way to do this using wildcards
# because we want the output of the first one to be temporary while we want to guarantee that this one sticks around
use rule samtools_index as samtools_index_deduped with:
    input:
        "BAM_files/{sample}.rmd.bam"
    output:
        "BAM_files/{sample}.rmd.bam.bai"
    log:
        "logs/samtools_index_deduped/{sample}.log"

# Rule to get diagnostic stats for our alignments
include: get_rule_filepath("BAM_stats")










